2.1.1
A = [31, 41, 59, 26, 41, 58]
1. arraging key = 41, already in place A = [31, 41, 59, 26, 41, 58]
2. arraging key = 59, already in place A = [31, 41, 59, 26, 41, 58]
3. arraging key = 26 A = [31, 41, 59, 26, 41, 58] -> A = [31, 41, 59, 59, 41, 58] -> A = [31, 41, 41, 59, 41, 58] -> A = [31, 31, 41, 59, 41, 58] -> A = [26, 41, 41, 59, 41, 58]
4. arranging key = 41 A = [26, 41, 41, 59, 41, 58] -> A = [26, 41, 41, 59, 59, 58] -> A = [26, 41, 41, 41, 59, 58]
5. arranging key = 58 A = [26, 41, 41, 41, 59, 59] -> A = [26, 41, 41, 41, 58, 59]
A is sorted

2.1.2

void insert_sort_decend(int * arr, int size) {
	for (int j = size - 2; j >= 0; --j) {
		int key = arr[j];
		int i = j + 1;
		while (i <= size - 1 && arr[i] > key) {
			arr[i - 1] = arr[i];
			++i;
		} 
		arr[i - 1] = key;
	}
}

2.1.3

#include <iostream>

int search(int * arr, int size, int value) {
	for (int  i = 0; i < size; ++i) {
		if (arr[i] == value)
			return i;
	}
	return -1;
}

int main() {
	int size = 0;
	std:: cin >> size;
	int arr[size] = {};
	for (int i = 0; i < size; ++i) 
		std:: cin >> arr[i];

	int value = 0;
	std:: cin >> value;

 	if (search(arr, size, value) != -1)
 		std:: cout << search(arr, size, value) << "\n";
 	else
 		std:: cout << "NIL\n";

 	return 0;
}

2.1.4

#include <iostream>

int *bin_sum(int * a, int * b, int n) {
	int *sum = new int[n + 1];
	for (int  i = n - 1; i >= 0; --i) {
		sum[i] = (a[i] + b[i] + sum[i + 1]) / 2;
		sum[i + 1] = ((a[i] + b[i] + sum[i + 1]) % 2);
	}
	return sum;
}

int main() {
	int n = 5;
	int a[5] = {1, 1, 1, 1, 0}, b[5] = {1, 0, 1, 1, 0};

	int *arr = 0;
	arr = bin_sum(a, b, n);

 	for (int i = 0; i < n + 1; ++i)
 		std:: cout << arr[i];

 	return 0;
}