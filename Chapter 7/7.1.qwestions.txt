7.1.1
Рассмотрим работу процедуры partion на примере:
A = {13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11}
A = {13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11}
A = {13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11}
A = {9, 19, 13, 5, 12, 8, 7, 4, 21, 2, 6, 11}
A = {9, 5, 13, 19, 12, 8, 7, 4, 21, 2, 6, 11}
A = {9, 5, 13, 19, 12, 8, 7, 4, 21, 2, 6, 11}
A = {9, 5, 8, 19, 12, 13, 7, 4, 21, 2, 6, 11}
A = {9, 5, 8, 7, 12, 13, 19, 4, 21, 2, 6, 11}
A = {9, 5, 8, 7, 4, 13, 19, 12, 21, 2, 6, 11}
A = {9, 5, 8, 7, 4, 13, 19, 12, 21, 2, 6, 11}
A = {9, 5, 8, 7, 4, 2, 19, 12, 21, 13, 6, 11}
A = {9, 5, 8, 7, 4, 2, 6, 12, 21, 13, 19, 11}
A = {9, 5, 8, 7, 4, 2, 6, 11, 21, 13, 19, 12}

7.1.2
Если все элементы одинаковые, то процедура выведеть r, как результат.
int partion(int * arr, int low, int high) {
	int value = arr[high];
	int i = low - 1;
	for (int j = low; j < high; ++j)
		if (arr[j] <= value) {
			i++;
			change(arr, i, j);
		}
	change(arr, i + 1, high);
	if (i + 1 == high) {
		return (low + high) / 2;
	}
	return i + 1;
}

7.1.3
В процессе выполнения процедуры выполняется n проверок и не более n перестановок, время выполнения всего, что находится вне цикла выполняется за константное время, что дает время работы T(n).

7.1.4
int partion_decreasing(int * arr, int low, int high) {
	int value = arr[high];
	int i = low - 1;
	for (int j = low; j < high; ++j)
		if (arr[j] >= value) {
			i++;
			change(arr, i, j);
		}
	change(arr, i + 1, high);
	if (i + 1 == high) {
		return (low + high) / 2;
	}
	return i + 1;
}