5.2
a.
Создаем массив P, заполненный нулями
c = 0
while c != n do
	i = Random(1, n)
	if A[i] == value
		return i
	if P[i] == 0 then 
		P[i] = 1
		c ++
return A не содержит value

b.
Пусть N это количество необходимых проверок, тогда
E[N] = Sum(i*Pr{i повторов необходимо}) = Sum(i * ((n - 1)/n)^(i - 1) * (1/n)) = n.

c.
Пусть N это количество необходимых проверок, тогда
E[N] = Sum(i*Pr{i повторов необходимо}) = Sum(i * ((n - k)/n)^(i - 1) * (k/n)) = n/k.

d.
Такая же проблема, как и сколько мячей нужно кинуть, чтобы в каждой корзине оказалось хотя бы по одному, отает данной задачи n(ln n + O(1)).

e.
Среднее время будет (n + 1)/2, худшее n.

g.
и среднее и худшее время равно n.

h.
Scramble-search работает так же как и deterministic-search, но добавляется время на перемешивание элементов.

i.
Я бы выбрал обычный линейный поиск так как, он гарантированно завершится через n шагов, тем более, что за то время, пока мы бы перемешивали элементы для третьего алгоритма мы уже успели бы сделать линейный поиск.