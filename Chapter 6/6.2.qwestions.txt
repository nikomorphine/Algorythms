6.2.1
A = [27, 17, 3, 16, 13, 10, 1, 5, 7, 12, 4, 8, 9, 0]
После выполнения процедуры Max-heapify(A, 3), получим:
A = [27, 17, 3, 16, 13, 10, 1, 5, 7, 12, 4, 8, 9, 0]
A = [27, 17, 10, 16, 13, 9, 1, 5, 7, 12, 4, 8, 3, 0]

6.2.2
void min_heapify(int * arr, int size, int i) {
	int l = left(i);
	int r = right(i);
	int smallest = 0;
	if (l < size && arr[l] < arr[i])
		smallest = l;
	else largest = i;
	if (r < size && arr[r] < arr[largest])
		smallest = r;
	if (largest != i) {
		arr[i] += arr[largest];
		arr[largest] = arr[i] - arr[largest];
		arr[i] -= arr[largest];
		min_heapify(arr, size, largest);
	}


Время работы данной процедуры такое же, как и у max-heapify.

6.2.3
Массив останется неизмененным и процедура завершится, так как индекс максимального элемента будет равен индексу самого элемента.

6.2.4
Массив останется неизмененным и процедура завершится, так как элемент является листом, поэтому индекс максимального будет равен индексу элемента.

6.2.5
while (i < A.heapsize) {
	int l = left(i);
	int r = right(i);
	int smallest = 0;
	if (l < size && arr[l] < arr[i])
		smallest = l;
	else largest = i;
	if (r < size && arr[r] < arr[largest])
		smallest = r;
	if (largest != i) {
		arr[i] += arr[largest];
		arr[largest] = arr[i] - arr[largest];
		arr[i] -= arr[largest];
	else return A;
}
return A;

6.2.6
Худший случай реализуется, когда минимальный элемент находится в корне, то есть он должен стать листом, поэтому, так как высота кучи это floot(lg n), в худшем случае процедура отработает Omega(lg n).