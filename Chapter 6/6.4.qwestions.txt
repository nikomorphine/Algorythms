6.4.1
Проиллюстрируем работу сортировки heapsort:
A = [5, 13, 2, 25, 7, 17, 20, 8, 4]
A = [5, 13, 20, 25, 7, 17, 2, 8, 4]
A = [5, 25, 20, 13, 7, 17, 2, 8, 4]
A = [25, 5, 20, 13, 7, 17, 2, 8, 4]
A = [25, 13, 20, 5, 7, 17, 2, 8, 4]
A = [25, 13, 20, 8, 7, 17, 2, 5, 4]
A = [4, 13, 20, 8, 7, 17, 2, 5, 25]
A = [20, 13, 4, 8, 7, 17, 2, 5, 25]
A = [20, 13, 17, 8, 7, 4, 2, 5, 25]
A = [5, 13, 17, 8, 7, 4, 2, 20, 25]
A = [17, 13, 5, 8, 7, 4, 2, 20, 25]
A = [2, 13, 5, 8, 7, 4, 17, 20, 25]
A = [13, 2, 5, 8, 7, 4, 17, 20, 25]
A = [13, 8, 5, 2, 7, 4, 17, 20, 25]
A = [4, 8, 5, 2, 7, 13, 17, 20, 25]
A = [8, 4, 5, 2, 7, 13, 17, 20, 25]
A = [8, 7, 5, 2, 4, 13, 17, 20, 25]
A = [4, 7, 5, 2, 8, 13, 17, 20, 25]
A = [7, 4, 5, 2, 8, 13, 17, 20, 25]
A = [2, 4, 5, 7, 8, 13, 17, 20, 25]
A = [5, 4, 2, 7, 8, 13, 17, 20, 25]
A = [2, 4, 5, 7, 8, 13, 17, 20, 25]
A = [4, 2, 5, 7, 8, 13, 17, 20, 25]
A = [2, 4, 5, 7, 8, 13, 17, 20, 25]

6.4.2
Инвариант цикла пирамидальной сортировки: перед каждым повтором цикла A[1..i] представляет собой невозрастающую пирамиду, содержащую i наименьших элементов исходного массива, а A[i + 1..n] содержит i - 1 наибольших элементов исходного массива в отсортированном порядке.
Инициализация: Перед первой итерацией цикла A[1..n] -- это неаозрастающая пирамида, а A[n + 1, n] тривиально не содержит максимальных элементов в отсортированном порядке.
Сохранение: Пусть на i-той итерации сохраняется инвариант цикла, тогда A[1..i + 1] представляет собой невозрастающую пирамиду, содержащую i наименьших элементов исходного массива, а A[i + 2..n] содержит i - 2 наибольших элементов исходного массива в отсортированном порядке. После выполнения i-той итерации получим, что A[1..i] -- это пирамида, так как к ней был применен max-hepify, а на i + 1 место поставлено наибольшее число из предыдущей пирамиды, но так как все большие числа исходного массива уже были в массиве на A[i + 2..n], то новое число войдет в эту часть в отсортированном виде.
Завершение: После завершения цикла i = 2, получаем, что A[2..n] -- самые большие числа исходного массива в отсортированном порядке, а первый элемент -- это пирамида, но так как все остальные числа больше, то массив отсортирован.

6.4.3
Так как массив в возрастающем порядке, то он не является кучей и алгоритм пройдется за Theta(n lg n)
В противоположном случае так же придется сделать Theta(n lg n) итераций, тз-за перестройки кучи каждый раз.